{"version":3,"sources":["index.js","components/Calculator.js","components/Display.js"],"names":["App","href","ReactDOM","render","document","querySelector","createState","currentValue","expression","lastAction","expressionDisplay","toString","length","MAX_LENGTH","EXPRESSION","slice","padStart","ACTION","CLEAR","ERROR","OPERATOR","NEGATIVE","CALCULATION","NUMBER","OVERFLOW","SUBTRACT","ADD","MULTIPLY","DIVIDE","CALCULATE","DECIMAL","CURRENT_VALUE","CLEAR_STATE","BUTTON_DEFINITIONS","symbol","id","Calculator","props","state","handleClick","bind","handleKeyPress","addEventListener","this","removeEventListener","event","target","value","clear","calculate","handleOperator","handleNumber","CLEAN_KEY","key","replace","console","log","setState","message","HANDLER","setTimeout","round","result","LEADING_DIGITS","indexOf","SIGNIFICANT_DIGITS","ROUND_FACTOR","Number","parseInt","padEnd","Math","eval","error","operator","makeState","startsWith","number","includes","NEXT_VALUE","buttonComponents","makeButtons","className","React","Component","definitions","makeButtonJSX","onClick","reduce","components","definition","Array","isArray","forEach","index","push","Display"],"mappings":"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","file":"static/js/main.4fdf15b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Calculator from './components/Calculator';\r\nimport './scss/index.scss';\r\n\r\nif (module.hot) module.hot.accept();\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <Calculator />\r\n            <footer>\r\n                <p>Designed and Developed by <a href=\"https://www.eduard-mekler.com\">Eduard Mekler</a></p>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n)","import React from 'react';\r\nimport Display from './Display'\r\n\r\n/*\r\n  TODO:\r\n    -Prettify buttons\r\n*/\r\n\r\n// Create State Object shorthand notation\r\nfunction createState(currentValue, expression, lastAction) {\r\n    let expressionDisplay = expression;\r\n\r\n    if (expressionDisplay.toString().length > MAX_LENGTH.EXPRESSION) {\r\n        expressionDisplay = expressionDisplay.slice(-MAX_LENGTH.EXPRESSION + 3).padStart(MAX_LENGTH.EXPRESSION, '.');\r\n    }\r\n    return {\r\n        currentValue,\r\n        expression,\r\n        lastAction,\r\n        expressionDisplay\r\n    }\r\n}\r\n\r\n// Enumerations for actions, operators, decimal, and max length\r\nconst ACTION = {\r\n    CLEAR: null,\r\n    ERROR: 'error',\r\n    OPERATOR: 'operator',\r\n    NEGATIVE: 'negative',\r\n    CALCULATION: 'equals',\r\n    NUMBER: 'number',\r\n    OVERFLOW: 'overflow'\r\n};\r\n\r\nconst OPERATOR = {\r\n    SUBTRACT: '-',\r\n    ADD: '+',\r\n    MULTIPLY: '*',\r\n    DIVIDE: '/',\r\n    CALCULATE: '=',\r\n    CLEAR: 'C'\r\n};\r\n\r\nconst DECIMAL = '.';\r\n\r\n/*\r\n    This is very crude currently and may break if the font or element sizing is modified.\r\n    On mobile, the max length of display current value is 11 characters & 68 characters for the expression.\r\n    On desktop, the max length of display current value is 12 characters & 76 characters for the expression.\r\n*/\r\nconst MAX_LENGTH = {\r\n    CURRENT_VALUE: 11,\r\n    EXPRESSION: 68\r\n}\r\n\r\n// Clear & error state constants\r\nconst CLEAR_STATE = createState('0', '', ACTION.CLEAR);\r\n\r\nconst BUTTON_DEFINITIONS = [\r\n    [\r\n        'zero',\r\n        'one',\r\n        'two',\r\n        'three',\r\n        'four',\r\n        'five',\r\n        'six',\r\n        'seven',\r\n        'eight',\r\n        'nine'\r\n    ],\r\n    { symbol: OPERATOR.CALCULATE, id: 'equals' },\r\n    { symbol: OPERATOR.ADD, id: 'add' },\r\n    { symbol: OPERATOR.SUBTRACT, id: 'subtract' },\r\n    { symbol: OPERATOR.MULTIPLY, id: 'multiply' },\r\n    { symbol: OPERATOR.DIVIDE, id: 'divide' },\r\n    { symbol: OPERATOR.CLEAR, id: 'clear' },\r\n    { symbol: DECIMAL, id: 'decimal' },\r\n]\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = CLEAR_STATE;\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handleKeyPress);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.handleKeyPress);\r\n    }\r\n\r\n    handleClick(event) {\r\n        switch (event.target.value) {\r\n            case OPERATOR.CLEAR:\r\n                this.clear();\r\n                break;\r\n            case OPERATOR.CALCULATE:\r\n                this.calculate();\r\n                break;\r\n            case OPERATOR.ADD:\r\n            case OPERATOR.SUBTRACT:\r\n            case OPERATOR.MULTIPLY:\r\n            case OPERATOR.DIVIDE:\r\n                this.handleOperator(event.target.value);\r\n                break;\r\n            default:\r\n                this.handleNumber(event.target.value);\r\n        }\r\n    }\r\n\r\n    handleKeyPress(event) {\r\n        // F keys,  any key that is not a calculator value, or Control / Caps Lock\r\n        const INVALID_KEYS = /^F\\d{1,2}|[^-1234567890./*+=C]+|^C.+/\r\n\r\n        const CLEAN_KEY = event.key.replace('Enter', OPERATOR.CALCULATE)\r\n            .replace('Escape', OPERATOR.CLEAR)\r\n            .replace(INVALID_KEYS, '');\r\n\r\n        console.log(CLEAN_KEY);\r\n\r\n        CLEAN_KEY && this.handleClick({ target: { value: CLEAN_KEY } });\r\n    }\r\n\r\n    clear() {\r\n        this.setState(CLEAR_STATE);\r\n    }\r\n\r\n    error(message, state) {\r\n        const HANDLER = this.handleClick;\r\n        this.handleClick = () => null;\r\n\r\n        this.setState(createState('ERROR', message, ACTION.ERROR));\r\n        setTimeout(() => {\r\n            this.handleClick = HANDLER;\r\n            state ? this.setState(state) : this.clear();\r\n        }, 1000);\r\n    }\r\n\r\n    calculate() {\r\n        function round(result) {\r\n            const LEADING_DIGITS = result.toString().indexOf(DECIMAL);\r\n            if (LEADING_DIGITS === -1) return result;\r\n\r\n            const SIGNIFICANT_DIGITS = MAX_LENGTH.CURRENT_VALUE - (LEADING_DIGITS + 1);\r\n            const ROUND_FACTOR = Number.parseInt('1'.padEnd(SIGNIFICANT_DIGITS + 1, '0'));\r\n\r\n            return Math.round(result * ROUND_FACTOR) / ROUND_FACTOR;\r\n        }\r\n        this.setState(state => {\r\n            if (state.lastAction !== ACTION.CALCULATION && state.lastAction !== ACTION.CLEAR) {\r\n                let result;\r\n                try {\r\n                    // eslint-disable-next-line\r\n                    result = round(eval(state.expression.replace(/--/g, '- -')));\r\n                    if (result.toString().length > MAX_LENGTH.CURRENT_VALUE) this.error('OVERFLOW');\r\n                } catch {\r\n                    this.error('INVALID EXPRESSION');\r\n                }\r\n                return createState(result, `${state.expression}=${result}`, ACTION.CALCULATION);\r\n            } else {\r\n                return state;\r\n            }\r\n        })\r\n    }\r\n\r\n    handleOperator(operator) {\r\n        const makeState = createState.bind(null, operator);\r\n\r\n        this.setState(state => {\r\n            switch (state.lastAction) {\r\n                case ACTION.CLEAR:\r\n                    if (operator === OPERATOR.SUBTRACT) {\r\n                        return makeState(operator, ACTION.NEGATIVE);\r\n                    }\r\n                    break;\r\n                case ACTION.NEGATIVE:\r\n                    if (operator !== OPERATOR.SUBTRACT) {\r\n                        if (state.expression.startsWith(OPERATOR.SUBTRACT)) {\r\n                            return makeState(`0${operator}`, ACTION.OPERATOR);\r\n                        } else {\r\n                            return makeState(`${state.expression.replace(/[-/*+]-*$/, operator)}`, ACTION.OPERATOR);\r\n                        }\r\n                    }\r\n                    break;\r\n                case ACTION.OPERATOR:\r\n                    if (operator === OPERATOR.SUBTRACT) {\r\n                        return makeState(`${state.expression + operator}`, ACTION.NEGATIVE);\r\n                    } else {\r\n                        return makeState(`${state.expression.replace(/[-/*+]-*$/, operator)}`, ACTION.OPERATOR)\r\n                    }\r\n                case ACTION.CALCULATION:\r\n                    return makeState(`${state.currentValue + operator}`, ACTION.OPERATOR);\r\n                default:\r\n                    return makeState(`${state.expression + operator}`, ACTION.OPERATOR);\r\n            }\r\n        })\r\n    }\r\n\r\n    handleNumber(number) {\r\n        this.setState(state => {\r\n            if (state.currentValue === CLEAR_STATE.currentValue || state.lastAction === ACTION.CALCULATION) {\r\n                number = number === DECIMAL ? '0.' : number;\r\n                return createState(number, number, ACTION.NUMBER);\r\n            } else {\r\n                number = number === DECIMAL && state.currentValue.includes(DECIMAL) ? '' : number;\r\n                const NEXT_VALUE = state.currentValue.replace(/^[-/+*]/, '') + number;\r\n                if (NEXT_VALUE.toString().length > MAX_LENGTH.CURRENT_VALUE) this.error('MAX DIGITS', state);\r\n                return createState(\r\n                    NEXT_VALUE,\r\n                    state.expression + number,\r\n                    ACTION.NUMBER\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const buttonComponents = makeButtons(BUTTON_DEFINITIONS, this.handleClick);\r\n\r\n        return (\r\n            <div className=\"calculator\">\r\n                <Display currentValue={this.state.currentValue} expression={this.state.expressionDisplay}></Display>\r\n                {buttonComponents}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction makeButtons(definitions, handleClick) {\r\n    function makeButtonJSX(id, symbol) {\r\n        return <button\r\n            className=\"button\"\r\n            key={id}\r\n            id={id}\r\n            value={symbol}\r\n            onClick={handleClick}\r\n        >\r\n            {symbol}\r\n        </button>;\r\n    }\r\n    const buttons = definitions.reduce((components, definition) => {\r\n        if (Array.isArray(definition)) {\r\n            definition.forEach((number, index) => {\r\n                components.push(makeButtonJSX(number, index));\r\n            });\r\n        } else {\r\n            components.push(makeButtonJSX(definition.id, definition.symbol));\r\n        }\r\n\r\n        return components;\r\n    }, []);\r\n\r\n    return buttons;\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\n\r\nconst Display = props => {\r\n    return (\r\n        <div className=\"display\">\r\n            <div id=\"currentValue\">{props.currentValue}</div>\r\n            <div id=\"expression\">{props.expression}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;"],"sourceRoot":""}