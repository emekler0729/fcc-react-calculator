{"version":3,"sources":["index.js","components/Calculator.js","components/Display.js"],"names":["App","href","ReactDOM","render","document","querySelector","createState","currentValue","expression","lastAction","ACTION","CLEAR","ERROR","OPERATOR","NEGATIVE","CALCULATION","NUMBER","SUBTRACT","ADD","MULTIPLY","DIVIDE","CALCULATE","DECIMAL","CLEAR_STATE","ERROR_STATE","BUTTON_DEFINITIONS","symbol","id","Calculator","props","state","handleClick","bind","handleKeyPress","addEventListener","this","event","target","value","clear","calculate","handleOperator","handleNumber","CLEAN_KEY","key","replace","setState","setTimeout","result","Math","round","eval","error","operator","makeState","startsWith","number","includes","buttonComponents","makeButtons","className","React","Component","definitions","makeButtonJSX","onClick","reduce","components","definition","Array","isArray","forEach","index","push","Display"],"mappings":"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","file":"static/js/main.74c72221.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Calculator from './components/Calculator';\r\nimport './scss/index.scss';\r\n\r\nif (module.hot) module.hot.accept();\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <Calculator />\r\n            <footer>\r\n                <p>Designed and Developed by <a href=\"https://www.eduard-mekler.com\">Eduard Mekler</a></p>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n)","import React from 'react';\r\nimport Display from './Display'\r\n\r\n/*\r\n  TODO: \r\n    -Make it mobile responsive\r\n    -Handle rounding\r\n    -Handle Digit Overflow & Expression Wrapping\r\n    -Prettify buttons\r\n*/\r\n\r\n// Create State Object shorthand notation\r\nfunction createState(currentValue, expression, lastAction) {\r\n    return {\r\n        currentValue,\r\n        expression,\r\n        lastAction\r\n    }\r\n}\r\n\r\n// Enumerations for actions, operators, and decimal\r\nconst ACTION = {\r\n    CLEAR: null,\r\n    ERROR: 'error',\r\n    OPERATOR: 'operator',\r\n    NEGATIVE: 'negative',\r\n    CALCULATION: 'equals',\r\n    NUMBER: 'number'\r\n};\r\n\r\nconst OPERATOR = {\r\n    SUBTRACT: '-',\r\n    ADD: '+',\r\n    MULTIPLY: '*',\r\n    DIVIDE: '/',\r\n    CALCULATE: '=',\r\n    CLEAR: 'C'\r\n};\r\n\r\nconst DECIMAL = '.';\r\n\r\n// Clear & error state constants\r\nconst CLEAR_STATE = createState('0', '', ACTION.CLEAR);\r\nconst ERROR_STATE = createState('ERROR', '', ACTION.ERROR);\r\n\r\nconst BUTTON_DEFINITIONS = [\r\n    [\r\n        'zero',\r\n        'one',\r\n        'two',\r\n        'three',\r\n        'four',\r\n        'five',\r\n        'six',\r\n        'seven',\r\n        'eight',\r\n        'nine'\r\n    ],\r\n    { symbol: OPERATOR.CALCULATE, id: 'equals' },\r\n    { symbol: OPERATOR.ADD, id: 'add' },\r\n    { symbol: OPERATOR.SUBTRACT, id: 'subtract' },\r\n    { symbol: OPERATOR.MULTIPLY, id: 'multiply' },\r\n    { symbol: OPERATOR.DIVIDE, id: 'divide' },\r\n    { symbol: OPERATOR.CLEAR, id: 'clear' },\r\n    { symbol: DECIMAL, id: 'decimal' },\r\n]\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = CLEAR_STATE;\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handleKeyPress);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.addEventListener('keydown', this.handleKeyPress);\r\n    }\r\n\r\n    handleClick(event) {\r\n        switch (event.target.value) {\r\n            case OPERATOR.CLEAR:\r\n                this.clear();\r\n                break;\r\n            case OPERATOR.CALCULATE:\r\n                this.calculate();\r\n                break;\r\n            case OPERATOR.ADD:\r\n            case OPERATOR.SUBTRACT:\r\n            case OPERATOR.MULTIPLY:\r\n            case OPERATOR.DIVIDE:\r\n                this.handleOperator(event.target.value);\r\n                break;\r\n            default:\r\n                this.handleNumber(event.target.value);\r\n        }\r\n    }\r\n\r\n    handleKeyPress(event) {\r\n        // F keys,  any key that is not a calculator value, or Control / Caps Lock\r\n        const INVALID_KEYS = /^F\\d{1,2}|[^-1234567890./*+=C]+|^C.+/\r\n\r\n        const CLEAN_KEY = event.key.replace('Enter', OPERATOR.CALCULATE)\r\n            .replace('Escape', OPERATOR.CLEAR)\r\n            .replace(INVALID_KEYS, '');\r\n\r\n        CLEAN_KEY && this.handleClick({ target: { value: CLEAN_KEY } });\r\n    }\r\n\r\n    clear() {\r\n        this.setState(CLEAR_STATE);\r\n    }\r\n\r\n    error() {\r\n        this.setState(ERROR_STATE);\r\n        setTimeout(() => {\r\n            this.clear();\r\n        }, 600);\r\n    }\r\n\r\n    calculate() {\r\n        this.setState(state => {\r\n            if (state.lastAction !== ACTION.CALCULATION && state.lastAction !== ACTION.CLEAR) {\r\n                let result;\r\n                try {\r\n                    // eslint-disable-next-line\r\n                    result = Math.round(10000000000 * eval(state.expression.replace(/--/g, '- -'))) / 10000000000;\r\n\r\n                } catch {\r\n                    this.error();\r\n                }\r\n                return createState(result, `${state.expression}=${result}`, ACTION.CALCULATION);\r\n            } else {\r\n                return state;\r\n            }\r\n        })\r\n    }\r\n\r\n    handleOperator(operator) {\r\n        const makeState = createState.bind(null, operator);\r\n\r\n        this.setState(state => {\r\n            switch (state.lastAction) {\r\n                case ACTION.CLEAR:\r\n                    if (operator === OPERATOR.SUBTRACT) {\r\n                        return makeState(operator, ACTION.NEGATIVE);\r\n                    }\r\n                    break;\r\n                case ACTION.NEGATIVE:\r\n                    if (operator !== OPERATOR.SUBTRACT) {\r\n                        if (state.expression.startsWith(OPERATOR.SUBTRACT)) {\r\n                            return makeState(`0${operator}`, ACTION.OPERATOR);\r\n                        } else {\r\n                            return makeState(`${state.expression.replace(/[-/*+]-*$/, operator)}`, ACTION.OPERATOR);\r\n                        }\r\n                    }\r\n                    break;\r\n                case ACTION.OPERATOR:\r\n                    if (operator === OPERATOR.SUBTRACT) {\r\n                        return makeState(`${state.expression + operator}`, ACTION.NEGATIVE);\r\n                    } else {\r\n                        return makeState(`${state.expression.replace(/[-/*+]-*$/, operator)}`, ACTION.OPERATOR)\r\n                    }\r\n                case ACTION.CALCULATION:\r\n                    return makeState(`${state.currentValue + operator}`, ACTION.OPERATOR);\r\n                default:\r\n                    return makeState(`${state.expression + operator}`, ACTION.OPERATOR);\r\n            }\r\n        })\r\n    }\r\n\r\n    handleNumber(number) {\r\n        this.setState(state => {\r\n            if (state.currentValue === CLEAR_STATE.currentValue || state.lastAction === ACTION.CALCULATION) {\r\n                number = number === DECIMAL ? '0.' : number;\r\n                return createState(number, number, ACTION.NUMBER);\r\n            } else {\r\n                number = number === DECIMAL && state.currentValue.includes(DECIMAL) ? '' : number;\r\n                return createState(\r\n                    state.currentValue.replace(/^[-/+*]/, '') + number,\r\n                    state.expression + number,\r\n                    ACTION.NUMBER\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const buttonComponents = makeButtons(BUTTON_DEFINITIONS, this.handleClick);\r\n\r\n        return (\r\n            <div className=\"calculator\">\r\n                <Display currentValue={this.state.currentValue} expression={this.state.expression}></Display>\r\n                {buttonComponents}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction makeButtons(definitions, handleClick) {\r\n    function makeButtonJSX(id, symbol) {\r\n        return <button\r\n            className=\"button\"\r\n            key={id}\r\n            id={id}\r\n            value={symbol}\r\n            onClick={handleClick}\r\n        >\r\n            {symbol}\r\n        </button>;\r\n    }\r\n    const buttons = definitions.reduce((components, definition) => {\r\n        if (Array.isArray(definition)) {\r\n            definition.forEach((number, index) => {\r\n                components.push(makeButtonJSX(number, index));\r\n            });\r\n        } else {\r\n            components.push(makeButtonJSX(definition.id, definition.symbol));\r\n        }\r\n\r\n        return components;\r\n    }, []);\r\n\r\n    return buttons;\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\n\r\nconst Display = props => {\r\n    return (\r\n        <div className=\"display\">\r\n            <div id=\"currentValue\">{props.currentValue}</div>\r\n            <div id=\"expression\">{props.expression}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;"],"sourceRoot":""}